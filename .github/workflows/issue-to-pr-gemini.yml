name: Auto PR from Issue (Gemini)
on:
  workflow_dispatch:
  issues:
    types: [labeled]
  issue_comment:
    types: [created]

jobs:
  create_auto_pr:
    # run for manual dispatch, or when an issue labelled 'autopr-gemini', or when a comment starts with /autopr-gemini
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'issues' && github.event.label.name == 'autopr-gemini' && github.event.issue.pull_request == null) || (github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '/autopr-gemini')) }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git identity for Actions
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Set up Node (for Gemini CLI)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Gemini CLI (npm)
        run: |
          npm install -g @google/gemini-cli@latest
          # sanity: show version if available
          if command -v gemini >/dev/null 2>&1; then
            gemini --version || true
          else
            echo "gemini command not found; npx will be used"
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps (if needed by script)
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Build prompt file from issue/comment
        run: |
          # fill issue_title and issue_body from the event (works for issues and comments)
          ISSUE_TITLE="${{ github.event.issue.title || github.event.pull_request.title || '' }}"
          ISSUE_BODY="${{ github.event.issue.body || github.event.comment.body || github.event.pull_request.body || '' }}"
          cat > /tmp/gemini_prompt.txt <<'PROMPT'
You are an assistant that converts a GitHub issue or PR/comment into a set of concrete code changes.
Return ONLY a JSON object with this exact schema:

{
  "files": [
    { "path": "relative/path/to/file", "content": "full file contents as a single string (newlines allowed)" }
  ],
  "commit_message": "A concise commit message"
}

Constraints:
- Return valid JSON only (no extra explanation or text).
- If no code changes are necessary, return {"files":[], "commit_message":"no changes needed"}.
- Only modify source/docs/tests (do not modify .github/workflows or CI files).
- Keep edits minimal and focused on the issue or comment.

Issue title:
$ISSUE_TITLE

Issue / comment body:
$ISSUE_BODY

PROMPT
          echo "Wrote prompt to /tmp/gemini_prompt.txt (head):"
          head -n 40 /tmp/gemini_prompt.txt || true

      - name: Run Gemini CLI and save output
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          set -x
          # Prefer the installed binary; fallback to npx if not present.
          if command -v gemini >/dev/null 2>&1; then
            gemini chat --model="gemini-1.0" --api-key="${GEMINI_API_KEY}" --prompt-file=/tmp/gemini_prompt.txt > model_output.txt 2>&1 || true
          else
            npx @google/gemini-cli chat --model="gemini-1.0" --api-key="${GEMINI_API_KEY}" --prompt-file=/tmp/gemini_prompt.txt > model_output.txt 2>&1 || true
          fi
          echo "Wrote model_output.txt (size in bytes):"
          wc -c model_output.txt || true

      - name: Debug show model output head
        if: always()
        run: |
          echo "---- model_output.txt head ----"
          head -n 200 model_output.txt || true
          echo "---- end ----"

      - name: Apply model output with script
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
        run: |
          python .github/scripts/issue_to_pr_gemini.py "${{ github.event.issue.number }}" "${{ github.repository }}" --from-file model_output.txt

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "auto/issue-${{ github.event.issue.number }}"
          title: "Auto PR for #${{ github.event.issue.number }}"
          commit-message: "Auto changes for issue #${{ github.event.issue.number }}"
          body: "PR automatically generated by Gemini (please review)."

