name: Auto PR from Issue (Gemini)
on:
  workflow_dispatch:
  issues:
    types: [labeled]

jobs:
  create_auto_pr:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'issues' && github.event.label.name == 'autopr' && github.event.issue.pull_request == null) }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git identity for Actions
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      # ===== Gemini CLI step: produce model output into file =====
      - name: Run Gemini CLI to generate patch
        uses: google-github-actions/run-gemini-cli@v0
        with:
          # prompt will be constructed from the issue; we pass a short script that
          # prints the full issue and asks for JSON output. The action supports
          # 'prompt' multiline input.
          prompt: |
            You are an assistant that converts a GitHub issue into a set of concrete code changes.
            Return ONLY a JSON object with this exact schema:
            {
              "files": [
                { "path": "relative/path/to/file", "content": "full file contents" }
              ],
              "commit_message": "A concise commit message"
            }

            Issue title: ${{ github.event.issue.title || '' }}

            Issue body:
            ${{ github.event.issue.body || '' }}

            Constraints:
            - Return valid JSON only (no explanation).
            - If no code changes are necessary, return {"files":[], "commit_message":"no changes needed"}.
            - Only modify source/docs/tests (do not modify .github/workflows).
          # pass the API key stored in repository secrets
          gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
          # choose a model (leave blank to use default); change if you prefer a specific model
          # gemini_model: "gemini-1.0"   # optional
          output_file: model_output.txt

      - name: Debug: show model head (for troubleshooting)
        if: always()
        run: |
          echo "---- model_output (head) ----"
          head -n 200 model_output.txt || true
          echo "---- end head ----"

      - name: Install Git deps (if any) and run script to apply patch
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
        run: |
          python .github/scripts/issue_to_pr_gemini.py "${{ github.event.issue.number }}" "${{ github.repository }}" --from-file model_output.txt

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "auto/issue-${{ github.event.issue.number }}"
          title: "Auto PR for #${{ github.event.issue.number }}"
          commit-message: "Auto changes for issue #${{ github.event.issue.number }}"
          body: "PR automatically generated by Gemini CLI (please review)."

